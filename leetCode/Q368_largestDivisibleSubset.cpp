// [832,33,531,416,335,298,365,352,582,936,366,305,930,530,97,349,71,295,840,108,299,804,925,627,953,571,658,732,429,136,563,462,666,330,796,315,695,500,896,982,217,200,912,98,297,612,169,943,628,593,959,904,219,240,857,789,897,940,569,384,502,382,401,184,716,230,29,963,211,597,515,122,163,86,215,105,889,842,49,847,267,87,954,407,245,975,719,746,709,471,281,238,186,510,618,149,73,214,663,194,260,825,631,474,519,668,329,718,765,947,156,353,490,962,679,560,59,387,31,692,976,568,201,273,159,730,819,418,906,801,892,672,559,866,389,675,812,744,164,737,57,195,115,933,158,909,598,359,853,314,983,11,395,153,781,301,838,625,704,256,351,996,225,644,521,509,674,417,272,622,937,723,632,331,228,412,181,435,469,157,368,524,38,132,325,420,127,731,771,604,505,634,67,374,894,3,448,878,686,641,316,207,76,363,795,235,770,446,820,493,177,816,615,410,117,944,829,190,831,289,516,964,170,134,671,885,682,119,402,82,485,901,375,68,858,739,56,974,683,884,815,872,715,104,290,348,588,834,788,472,466,867,550,779,65,802,459,440,870,753,608,808,623,642,44,437,865,758,540,506,691,958,854,546,39,595,369,504,63,311,722,441,786,899,338,651,874,946,811,848,939,284,824,309,653,133,514,460,678,54,399,759,468,61,480,783,266,900,400,237,403,534,213,914,473,198,380,373,288,154,844,535,409,249,285,168,69,345,647,851,846,264,102,246,106,648,576,212,438,981,987,379,360,667,95,172,101,580,891,385,747,161,927,361,818,657,171,342,232,734,714,362,425,475,28,41,551,142,131,51,229,9,607,326,522,687,792,845,665,358,91,720,155,565,99,26,650,539,780,589,950,935,372,227,424,750,833,554,841,552,60,757,430,916,140,790,426,776,96,199,923,806,949,755,711,659,911,611,310,774,265,880,690,706,761,286,255,756,204,444,478,601,529,669,241,784,566,528,208,270,511,236,271,378,58,453,467,233,250,567,296,932,989,367,626,35,162,887,572,603,564,797,280,406,970,689,408,431,638,489,85,50,357,803,47,555,793,422,763,110,869,861,253,320,538,347,405,769,64,875,630,537,328,553,166,948,303,160,800,507,920,922,90,693,636,17,455,183,210,856,762,656,174,873,579,176,688,640,1,938,902,341,740,581,427,111,972,443,22,791,304,574,575,725,477,700,817,381,479,248,121,411,547,182,871,599,203,13,224,541,724,178,775,388,4,251,321,52,88,100,279,614,839,84,151,735,40,752,773,376,77,476,708,396,988,961,24,231,445,609,952,965,986,414,451,881,42,257,32,334,130,596,527,94,333,317,244,960,710,852,862,421,81,37,452,274,187,268,520,491,778,18,743,620,145,72,370,118,748,633,997,436,143,573,495,180,34]

// [819,475,859,124,442,542,162,36,974,464,332,150,227,527,425,975,946,489,531,620,161,901,431,320,420,258,867,746,265,879,916,739,737,391,532,278,553,567,603,368,899,104,594,777,529,568,722,369,450,694,703,220,311,22,639,920,889,736,184,119,652,923,855,42,454,484,21,86,314,271,259,47,70,179,120,438,980,813,319,682,32,981,56,944,110,436,62,761,358,268,154,164,751,452,536,188,117,158,729,375,556,905,675,940,885,488,610,566,871,590,621,245,842,354,329,466,987,948,971,502,698,422,37,238,890,194,966,617,101,468,521,776,407,757,615,323,837,957,295,81,151,563,786,428,243,251,766,191,574,240,347,304,477,237,850,795,205,302,262,725,77,20,482,43,387,156,880,695,802,312,845,364,98,624,959,700,390,501,273,657,740,217,208,513,363,412,815,995,321,638,381,476,869,75,630,272,345,629,895,303,681,284,803,305,292,543,276,956,111,483,820,473,246,986,448,734,581,54,218,174,882,248,511,519,598,414,49,934,693,206,210,1000,668,692,492,290,805,939,23,385,732,76,954,309,153,359,674,308,788,183,937,189,846,881,52,80,232,719,123,50,211,233,214,137,522,285,641,341,644,16,366,951,155,548,888,343,393,575,796,541,806,15,429,427,413,929,564,3,249,2,299,534,994,9,356,479,903,718,858,647,433,443,661,797,89,512,17,530,852,812,883,697,876,225,847,400,773,609,747,952,983,201,755,131,266,340,658,255,539,896,419,421,749,115,296,283,186,892,822,177,196,618,950,370,440,379,612,917,507,465,689,579,336,622,239,745,103,29,279,607,998,360,909,828,107,439,297,696,63,274,750,748,969,30,823,849,947,945,293,835,690,662,127,458,853,915,779,664,26,985,130,992,807,330,197,165,672,918,968,926,582,587,236,60,912,138,198,178,976,841,592,1,825,74,540,708,704,731,656,720,706,209,48,472,538,535,649,510,490,862,666,790,242,839,762,961,18,526,555,583,569,430,99,247,634,451,46,730,584,129,702,572,977,71,97,626,560,114,857,394,361,843,758,705,355,173,520,491,415,874,919,446,726,894,166,677,263,972,376,686,717,88,528,264,200,322,829,25,680,834,728,159,187,801,642,226,241,169,808,679,171,93,593,921,33,648,866,13,756,382,145,445,389,573,949,601,588,818,600,763,480,965,109,494,493,408,223,870,315,133,395,785,57,924,417,244,547,633,651,769,19,753,346,741,500,459,514,515,988,10,955,460,325,793,907,221,478,989,851,301,267,778,800,96,665,457,253,898,577,636,467,768,257,108,147,794,447,116,193,432,913,508,230,224,486,132,738,930,764,678,388,383,627,275,316,64,256,462,324,352,792,804,481,216,437,727,733,824,996,83,816,59,632,423,925,775,68,963,856,402,770,5,401,287,707,61,868,669,90,333,711,604,982,102,789]

// Given a set of distinct positive integers, find the largest subset such that every pair (Si, Sj) of elements in this subset satisfies: Si % Sj = 0 or Sj % Si = 0. 

// If there are multiple solutions, return any subset is fine. 

// Example 1: 
// nums: [1,2,3]

// Result: [1,2] (of course, [1,3] will also be ok)



// Example 2: 
// nums: [1,2,4,8]

// Result: [1,2,4,8]

class Solution {
public:
    void helper(vector<vector<int>>& subsets, int n){
        auto iterSubset = subsets.begin();
        bool isNew = true;
        vector<vector<int>> newAdded;
        for(auto iterSubset = subsets.begin(); iterSubset != subsets.end(); iterSubset++) {
            bool isOK = true;
            for(auto iter = iterSubset->rbegin(); iter != iterSubset->rend(); iter++) {
                if(n % (*iter) != 0){
                    isOK = false;
                    break;
                }
            }
            if(isOK){
                newAdded.push_back(*iterSubset);
                iterSubset->push_back(n);
                isNew = false;
            }
        }
        
        for(auto iterNew = newAdded.begin(); iterNew != newAdded.end(); iterNew++){
            subsets.push_back(*iterNew);
        }
        
        if (isNew) {
            vector<int> newSubset;
            newSubset.push_back(n);
            subsets.push_back(newSubset);
        }
    }

    vector<int> largestDivisibleSubset(vector<int>& nums) {
        int sz = nums.size();
        vector<int> res;
        if(sz == 0) return res;
        
        sort(nums.begin(), nums.end());
        vector<vector<int>> subsets;
        for(int i = 0; i < sz; i++){
            helper(subsets, nums[i]);
        }
        
        int max_size = 0;
        for(auto iterSubset = subsets.begin(); iterSubset != subsets.end(); iterSubset++){
            if(iterSubset->size() > max_size){
                max_size = iterSubset->size();
                res = *iterSubset;
            }
        }
        return res;
    }
};
